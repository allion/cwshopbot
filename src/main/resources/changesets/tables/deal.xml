<?xml version="1.0"?>
<!--
    cwshopbot
    Copyright (C) 2019  Marat Bukharov.

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
                   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
                                       http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.6.xsd">
    <changeSet id="deal" author="maratik">
        <createSequence sequenceName="deal_seq_id" cacheSize="10"/>
        <createTable tableName="deal">
            <column name="id" type="bigint" defaultValueComputed="nextval('deal_seq_id')">
                <constraints primaryKey="true" nullable="false"/>
            </column>
            <column name="seller_id" type="text collate &quot;C&quot;">
                <constraints nullable="false"/>
            </column>
            <column name="seller_name" type="text collate &quot;C&quot;">
                <constraints nullable="false"/>
            </column>
            <column name="seller_castle" type="text collate &quot;C&quot;">
                <constraints nullable="false"/>
            </column>
            <column name="buyer_id" type="text collate &quot;C&quot;">
                <constraints nullable="false"/>
            </column>
            <column name="buyer_name" type="text collate &quot;C&quot;">
                <constraints nullable="false"/>
            </column>
            <column name="buyer_castle" type="text collate &quot;C&quot;">
                <constraints nullable="false"/>
            </column>
            <column name="item" type="text collate &quot;C&quot;">
                <constraints nullable="false"/>
            </column>
            <column name="qty" type="integer">
                <constraints nullable="false"/>
            </column>
            <column name="price" type="integer">
                <constraints nullable="false"/>
            </column>
            <column name="creation_time" type="timestamp">
                <constraints nullable="false"/>
            </column>
        </createTable>
    </changeSet>
    <changeSet id="deal_collation" author="maratik">
        <sql>
            ALTER TABLE deal ALTER COLUMN seller_id TYPE TEXT COLLATE "C" USING (seller_id::TEXT);
            ALTER TABLE deal ALTER COLUMN seller_name TYPE TEXT COLLATE "C" USING (seller_name::TEXT);
            ALTER TABLE deal ALTER COLUMN seller_castle TYPE TEXT COLLATE "C" USING (seller_castle::TEXT);
            ALTER TABLE deal ALTER COLUMN buyer_id TYPE TEXT COLLATE "C" USING (buyer_id::TEXT);
            ALTER TABLE deal ALTER COLUMN buyer_name TYPE TEXT COLLATE "C" USING (buyer_name::TEXT);
            ALTER TABLE deal ALTER COLUMN buyer_castle TYPE TEXT COLLATE "C" USING (buyer_castle::TEXT);
            ALTER TABLE deal ALTER COLUMN item TYPE TEXT COLLATE "C" USING (item::TEXT);
        </sql>
    </changeSet>
    <changeSet id="deal_migrate_to_account_id" author="maratik">
        <dropNotNullConstraint tableName="deal" columnName="seller_id"/>
        <dropNotNullConstraint tableName="deal" columnName="seller_name"/>
        <dropNotNullConstraint tableName="deal" columnName="seller_castle"/>
        <dropNotNullConstraint tableName="deal" columnName="buyer_id"/>
        <dropNotNullConstraint tableName="deal" columnName="buyer_name"/>
        <dropNotNullConstraint tableName="deal" columnName="buyer_castle"/>
        <createIndex tableName="deal" indexName="deal_seller_id_ix">
            <column name="seller_id" type="text"/>
        </createIndex>
        <createIndex tableName="deal" indexName="deal_buyer_id_ix">
            <column name="buyer_id" type="text"/>
        </createIndex>
        <addColumn tableName="deal">
            <column name="seller_account_id" type="bigint">
                <constraints nullable="true"
                             foreignKeyName="deal_seller_account_fk"
                             referencedTableName="account"
                             referencedColumnNames="id"/>
            </column>
            <column name="buyer_account_id" type="bigint">
                <constraints nullable="true"
                             foreignKeyName="deal_buyer_account_fk"
                             referencedTableName="account"
                             referencedColumnNames="id"/>
            </column>
        </addColumn>
        <createIndex tableName="deal" indexName="deal_seller_account_ix">
            <column name="seller_account_id" type="bigint"/>
        </createIndex>
        <createIndex tableName="deal" indexName="deal_buyer_account_ix">
            <column name="buyer_account_id" type="bigint"/>
        </createIndex>
    </changeSet>
    <changeSet id="deal_migrate_to_account_id_2" author="maratik">
        <sql splitStatements="false">
            DO $$
                DECLARE
                    R RECORD;
                BEGIN
                    FOR R IN INSERT INTO account as a(external_id, name, castle, creation_time)
                        SELECT external_id, name, castle, min(creation_time) as creation_time
                          FROM ((SELECT d.seller_id          as external_id,
                                        d.seller_name        as name,
                                        d.seller_castle      as castle,
                                        min(d.creation_time) as creation_time
                                   FROM deal d
                                  WHERE d.seller_id IS NOT NULL
                                  GROUP BY d.seller_id, d.seller_name, d.seller_castle)
                           UNION ALL
                          (SELECT d.buyer_id           as external_id,
                                  d.buyer_name         as name,
                                  d.buyer_castle       as castle,
                                  min(d.creation_time) as creation_time
                             FROM deal d
                            WHERE d.buyer_id IS NOT NULL
                            GROUP BY d.buyer_id, d.buyer_name, d.buyer_castle)) t
                         GROUP BY external_id, name, castle
                        ON CONFLICT (external_id, name, castle) do update
                            set external_id = a.external_id,
                                name = a.name,
                                castle = a.castle,
                                CREATION_TIME = least(a.CREATION_TIME, EXCLUDED.CREATION_TIME)
                        RETURNING id, external_id, name, castle
                    LOOP
                        UPDATE deal
                           SET seller_id = null,
                               seller_name = null,
                               seller_castle = null,
                               seller_account_id = r.id
                         WHERE seller_account_id is null
                           AND seller_id = r.external_id
                           AND seller_name = r.name
                           AND seller_castle = r.castle;
                        UPDATE deal
                           SET buyer_id = null,
                               buyer_name = null,
                               buyer_castle = null,
                               buyer_account_id = r.id
                         WHERE buyer_account_id is null
                           AND buyer_id = r.external_id
                           AND buyer_name = r.name
                           AND buyer_castle = r.castle;
                    END LOOP;
                END
                $$ LANGUAGE PLPGSQL;
        </sql>
    </changeSet>
    <changeSet id="deal_migrate_to_account_id_3" author="maratik">
        <preConditions onError="CONTINUE">
            <sqlCheck expectedResult="0">
                select count(*)
                  from deal
                 where seller_id is not null
                    or buyer_id is not null
            </sqlCheck>
        </preConditions>
        <dropColumn tableName="deal" columnName="seller_id"/>
        <dropColumn tableName="deal" columnName="seller_name"/>
        <dropColumn tableName="deal" columnName="seller_castle"/>
        <dropColumn tableName="deal" columnName="buyer_id"/>
        <dropColumn tableName="deal" columnName="buyer_name"/>
        <dropColumn tableName="deal" columnName="buyer_castle"/>
        <addNotNullConstraint tableName="deal" columnName="seller_account_id"/>
        <addNotNullConstraint tableName="deal" columnName="buyer_account_id"/>
    </changeSet>
</databaseChangeLog>
